import copy
from pydantic import StrictInt, StrictStr, StrictFloat, Field, BaseModel
from configs import PrintConfig, SlicerVendor
from exceptions import (
    UnsupportedSlicerVendor,
    InvalidGCodeFileExtension,
    EndofFile,
)


class GCodeFile:

    file_name: StrictStr = Field(...)
    # TODO what is the type of filehandler?
    file_handle = None
    print_config: PrintConfig = None

    def __init__(self, file_name: str) -> "GCodeFile":
        # TODO detect last '.' and calculate extension from that position
        if file_name[-6:] != ".gcode":
            raise InvalidGCodeFileExtension(
                f"Expected '.gcode', got '{file_name[:-6]}'"
            )

        self.file_name = file_name
        self.file_handle = open(self.file_name, "r")

        self.print_config = PrintConfig(
            name=file_name,
            slicer_vendor=self.read_slicer_vendor(),
            printer_name="Unknown",
            nozzle_diameter=0.4,
        )

    def __del__(self):
        self.file_handle.close()

    def read_slicer_vendor(self) -> SlicerVendor:
        """
        Reads slicer vendor name from .gcode file

        Raises:
            UnsupportedSlicerVendor: Slicer Vendor can not be read from file

        Returns:
            SlicerVendor: Slicer vendor
        """
        current_position_in_file = self.file_handle.tell()
        self.file_handle.seek(0)

        line: str = self.file_handle.readline()
        if len(line) == 0:
            raise UnsupportedSlicerVendor("Slicer Vendor can not be read from file")

        if "generated by PrusaSlicer" in line:
            self.file_handle.seek(current_position_in_file)
            return SlicerVendor.PrusaSlicer

        while GCodeFile.is_empty(line) or GCodeFile.is_comment(line):

            line: str = self.file_handle.readline()
            if len(line) == 0:
                raise UnsupportedSlicerVendor("Slicer Vendor can not be read from file")

            if "Generated with Cura_SteamEngine" in line:
                self.file_handle.seek(current_position_in_file)
                return SlicerVendor.Cura

        raise UnsupportedSlicerVendor("Slicer Vendor can not be read from file")

    @staticmethod
    def is_comment(string: str) -> bool:
        string = copy.deepcopy(string)
        string = string.replace(" ", "")
        string = string.replace("\t", "")
        string = string.replace("\n", "")
        return len(string) > 0 and string[0] == ";"

    @staticmethod
    def is_empty(string: str) -> bool:
        string = copy.deepcopy(string)
        string = string.replace(" ", "")
        string = string.replace("\t", "")
        string = string.replace("\n", "")
        return len(string) == 0

    def next_gcode_command(self) -> str:
        line: str = self.file_handle.readline()
        if len(line) == 0:
            raise EndofFile("Slicer Vendor can not be read from file")

        while GCodeFile.is_empty(line) or GCodeFile.is_comment(line):
            line: str = self.file_handle.readline()
            if len(line) == 0:
                raise EndofFile("Slicer Vendor can not be read from file")

        return line.strip()
